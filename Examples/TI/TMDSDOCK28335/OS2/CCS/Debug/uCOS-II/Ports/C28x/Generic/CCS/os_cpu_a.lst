TMS320C2000 Assembler PC v20.2.1 Mon Jan  4 16:08:36 2021

Copyright (c) 1996-2018 Texas Instruments Incorporated
C:/ti/Workspace/PLC_certificate/ImitatePLC/Software/uCOS-II/Ports/C28x/Generic/CCS/os_cpu_a.asm PAGE    1

       1              ;
       2              ;********************************************************************************************************
       3              ;                                                uC/OS-II
       4              ;                                          The Real-Time Kernel
       5              ;
       6              ;
       7              ;                         (c) Copyright 2009-2015; Micrium, Inc.; Weston, FL
       8              ;                    All rights reserved.  Protected by international copyright laws.
       9              ;
      10              ;                                             TI C28x Port
      11              ;
      12              ; File      : OS_CPU_A.ASM
      13              ; Version   : V2.92.11
      14              ; By        : JFT
      15              ;
      16              ; LICENSING TERMS:
      17              ; ---------------
      18              ;           uC/OS-II is provided in source form for FREE short-term evaluation, for educational use or
      19              ;           for peaceful research.  If you plan or intend to use uC/OS-II in a commercial application/
      20              ;           product then, you need to contact Micrium to properly license uC/OS-II for its use in your
      21              ;           application/product.   We provide ALL the source code for your convenience and to help you
      22              ;           experience uC/OS-II.  The fact that the source is provided does NOT mean that you can use
      23              ;           it commercially without paying a licensing fee.
      24              ;
      25              ;           Knowledge of the source code may NOT be used to develop a similar product.
      26              ;
      27              ;           Please help us continue to provide the embedded community with the finest software available.
      28              ;           Your honesty is greatly appreciated.
      29              ;
      30              ;           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
      31              ;
      32              ; For       : TI C28x
      33              ; Mode      : C28 Object mode
      34              ; Toolchain : TI C/C++ Compiler
      35              ;********************************************************************************************************
      36              ;
      37              
      38              ;********************************************************************************************************
      39              ;                                             INCLUDE FILES
      40              ;********************************************************************************************************
      41              
      42                  .include "os_cpu_i.asm"
      43              
      44              
      45              ;********************************************************************************************************
      46              ;                                       EXTERNAL GLOBAL VARIABLES
      47              ;********************************************************************************************************
      48                                                                              ; External references
      49                  .ref   _OSRunning
      50                  .ref   _OSPrioCur
      51                  .ref   _OSPrioHighRdy
      52                  .ref   _OSTCBCur
      53                  .ref   _OSTCBHighRdy
      54                  .ref   _OSIntExit
      55                  .ref   _OSTaskSwHook
TMS320C2000 Assembler PC v20.2.1 Mon Jan  4 16:08:36 2021

Copyright (c) 1996-2018 Texas Instruments Incorporated
C:/ti/Workspace/PLC_certificate/ImitatePLC/Software/uCOS-II/Ports/C28x/Generic/CCS/os_cpu_a.asm PAGE    2

      56              
      57              
      58              ;********************************************************************************************************
      59              ;                                          PUBLIC FUNCTIONS
      60              ;********************************************************************************************************
      61                                                                              ; Functions declared in this file
      62                  .def   _OS_CPU_GetST0
      63                  .def   _OS_CPU_GetST1
      64                  .def   _OS_CPU_SR_Save
      65                  .def   _OS_CPU_SR_Restore
      66                  .def   _OSStartHighRdy
      67                  .def   _OS_CPU_RTOSINT_Handler
      68              
      69              
      70              ;********************************************************************************************************
      71              ;                                               EQUATES
      72              ;********************************************************************************************************
      73              
      74              
      75              ;********************************************************************************************************
      76              ;                                     CODE GENERATION DIRECTIVES
      77              ;********************************************************************************************************
      78                                                                              ; Set text section and reset local labels.
      79 00000000           .text
      80                  .newblock
      81              
      82              
      83              ;********************************************************************************************************
      84              ;                                            GET ST0 and ST1
      85              ;
      86              ; Description : Wrapper function to get ST0 and ST1 registers from a C function.
      87              ;
      88              ; Prototypes  : INT16U  OS_CPU_GetST0(void);
      89              ;               INT16U  OS_CPU_GetST1(void);
      90              ;********************************************************************************************************
      91              
      92                  .asmfunc
      93 00000000       _OS_CPU_GetST0:
      94 00000000 7618      PUSH    ST0
      95 00000001 2AA9      POP     AL
      96 00000002 0006      LRETR
      97                  .endasmfunc
      98              
      99                  .asmfunc
     100 00000003       _OS_CPU_GetST1:
     101 00000003 7608      PUSH    ST1
     102 00000004 2AA9      POP     AL
     103 00000005 0006      LRETR
     104                  .endasmfunc
     105              
     106              
     107              ;********************************************************************************************************
     108              ;                                   CRITICAL SECTION METHOD 3 FUNCTIONS
     109              ;
     110              ; Description: Disable/Enable interrupts by preserving the state of interrupts.  Generally speaking you
TMS320C2000 Assembler PC v20.2.1 Mon Jan  4 16:08:36 2021

Copyright (c) 1996-2018 Texas Instruments Incorporated
C:/ti/Workspace/PLC_certificate/ImitatePLC/Software/uCOS-II/Ports/C28x/Generic/CCS/os_cpu_a.asm PAGE    3

     111              ;              would store the state of the interrupt disable flag in the local variable 'cpu_sr' and then
     112              ;              disable interrupts.  'cpu_sr' is allocated in all of uC/OS-II's functions that need to
     113              ;              disable interrupts.  You would restore the interrupt disable state by copying back 'cpu_sr'
     114              ;              into the CPU's status register.
     115              ;
     116              ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
     117              ;                  void       OS_CPU_SR_Restore(OS_CPU_SR cpu_sr);
     118              ;
     119              ;
     120              ; Note(s)    : 1) These functions are used in general like this:
     121              ;
     122              ;                 void Task (void *p_arg)
     123              ;                 {
     124              ;                 #if OS_CRITICAL_METHOD == 3          /* Allocate storage for CPU status register */
     125              ;                     OS_CPU_SR  cpu_sr;
     126              ;                 #endif
     127              ;
     128              ;                          :
     129              ;                          :
     130              ;                     OS_ENTER_CRITICAL();             /* cpu_sr = OS_CPU_SaveSR();                */
     131              ;                          :
     132              ;                          :
     133              ;                     OS_EXIT_CRITICAL();              /* OS_CPU_RestoreSR(cpu_sr);                */
     134              ;                          :
     135              ;                          :
     136              ;                 }
     137              ;********************************************************************************************************
     138              
     139                  .asmfunc
     140 00000006       _OS_CPU_SR_Save:
     141 00000006 7608      PUSH    ST1
     142 00000007 3B10      DINT
     143 00000008 2AA9      POP    @AL
     144 00000009 9001      AND     AL, #1
     145 0000000a 0006      LRETR
     146                  .endasmfunc
     147              
     148                  .asmfunc
     149 0000000b       _OS_CPU_SR_Restore:
     150 0000000b 7608      PUSH    ST1
     151 0000000c 2AA0      POP     AR0
     152 0000000d 18A0      AND     AR0, #0xFFFE
         0000000e FFFE 
     153 0000000f CAA0      OR      AL, AR0
     154 00000010 22A9      PUSH    AL
     155 00000011 7600      POP     ST1
     156 00000012 0006      LRETR
     157                  .endasmfunc
     158              
     159              
     160              ;********************************************************************************************************
     161              ;                                         START MULTITASKING
     162              ;                                      void OSStartHighRdy(void)
     163              ; Note(s) : 1) This function triggers a PendSV exception (essentially, causes a context switch) to cause
     164              ;              the first task to start.
TMS320C2000 Assembler PC v20.2.1 Mon Jan  4 16:08:36 2021

Copyright (c) 1996-2018 Texas Instruments Incorporated
C:/ti/Workspace/PLC_certificate/ImitatePLC/Software/uCOS-II/Ports/C28x/Generic/CCS/os_cpu_a.asm PAGE    4

     165              ;
     166              ;           2) OSStartHighRdy() MUST:
     167              ;              a) Call OSTaskSwHook().
     168              ;              b) Set OSRunning to TRUE;
     169              ;              c) Restore context for OSTCBCurPtr.
     170              ;              d) IRET into highest ready task.
     171              ;********************************************************************************************************
     172                  .asmfunc
     173 00000013       _OSStartHighRdy:
     174                                                                              ; Call OSTaskSwHook()
     175                  ;LCR     #_OSTaskSwHook
     176                                                                              ; Set OSRunning to TRUE.
     177 00000013 8D00!     MOVL    XAR0, #_OSRunning
         00000014 0000 
     178 00000015 28C0      MOV     *AR0, #1
         00000016 0001 
     179                                                                              ; Restore context.
     180 00000017 8D00!     MOVL    XAR0, #_OSTCBCur                                    ; Get the process's SP.
         00000018 0000 
     181 00000019 8BC0      MOVL    XAR1, *XAR0
     182 0000001a 92C1      MOV     AL  , *AR1
     183 0000001b 96AD      MOV    @SP  ,  AL
     184                                                                              ; Restore registers.
     185 0000001c           OS_CTX_RESTORE
1                      .if .TMS320C2800_FPU32 = 1                                     ; Restore FPU registers, if enabled.
1        0000001c FFF1      POP     RB                                                  ;   RB
1        0000001d 59AD      MOVZ    AR1, @SP                                            ;   Can't use SP for indirect addressing.
1        0000001e E280      MOV32   STF, *--XAR1                                        ;   STF
         0000001f 0089 
1        00000020 E2AF      MOV32   R7H, *--XAR1                                        ;   R7H
         00000021 0789 
1        00000022 E2AF      MOV32   R6H, *--XAR1                                        ;   R6H
         00000023 0689 
1        00000024 E2AF      MOV32   R5H, *--XAR1                                        ;   R5H
         00000025 0589 
1        00000026 E2AF      MOV32   R4H, *--XAR1                                        ;   R4H
         00000027 0489 
1        00000028 E2AF      MOV32   R3H, *--XAR1                                        ;   R3H
         00000029 0389 
1        0000002a E2AF      MOV32   R2H, *--XAR1                                        ;   R2H
         0000002b 0289 
1        0000002c E2AF      MOV32   R1H, *--XAR1                                        ;   R1H
         0000002d 0189 
1        0000002e E2AF      MOV32   R0H, *--XAR1                                        ;   R0H
         0000002f 0089 
1        00000030 92A1      MOV     AL    , AR1                                         ;   Restore SP.
1        00000031 96AD      MOV     @SP   , AL
1                      .endif
1                                                                                     ; Restore CPU registers part 1.
1        00000032 0007      POP     RPC                                                 ;   RPC
1        00000033 87BE      POP     XT                                                  ;   XT
1        00000034 C5BE      POP     XAR7                                                ;   XAR7
1        00000035 C4BE      POP     XAR6                                                ;   XAR6
1        00000036 83BE      POP     XAR5                                                ;   XAR5
1        00000037 8ABE      POP     XAR4                                                ;   XAR4
TMS320C2000 Assembler PC v20.2.1 Mon Jan  4 16:08:36 2021

Copyright (c) 1996-2018 Texas Instruments Incorporated
C:/ti/Workspace/PLC_certificate/ImitatePLC/Software/uCOS-II/Ports/C28x/Generic/CCS/os_cpu_a.asm PAGE    5

1        00000038 82BE      POP     XAR3                                                ;   XAR3
1        00000039 86BE      POP     XAR2                                                ;   XAR2
1                     
1                                                                                     ; Overwrite saved IER in stack frame.
1        0000003a 58AD      MOVZ    AR0 , @SP                                           ;   Get SP.
1        0000003b D886      SUBB    XAR0, #6                                            ;   Point to old IER.
1        0000003c 06C0      MOVL    ACC , *XAR0                                         ;   Get old DBGSTAT:IER.
1        0000003d 5608      AND     ACC, #0xFFFF << 16
         0000003e FFFF 
1        0000003f 20A9      MOV     AL, IER                                             ;   Get current IER.
1        00000040 1EC0      MOVL   *XAR0, ACC                                           ;   Overwrite IER.
1                     
1                                                                                     ; Restore registers part 2.
1        00000041 0003      POP     AR1H:AR0H                                           ;   AR1H:AR0H
     186                                                                              ; IRET into task.
     187 00000042 7602      IRET
     188                  .endasmfunc
     189                                                                              ; Catch start high failure.
     190 00000043       OSStartHang:
     191 00000043 6F00      SB      OSStartHang, UNC
     192              
     193              
     194              ;********************************************************************************************************
     195              ;                                       HANDLE RTOSINT INTERRUPT
     196              ;                                   void OS_CPU_RTOSINT_Handler(void)
     197              ;
     198              ; Note(s) : 1) The RTOSINT interrupt is used to perform a context switch. The C28x core saves the
     199              ;              ST0, T, ACC, P, AR0, AR1, ST1, DP, IER, DBGSTAT (shadow) registers and the Return
     200              ;              Address.
     201              ;              The remaining registers AR1H, AR0H, XAR2..XAR7, XT and RPC are saved by the handler.
     202              ;              Using RTOSINT means that the switching mechanism is the same for a task or an ISR.
     203              
     204              ;           2) The context switching RTOSINT handler pseudo-code is:
     205              ;              a) Save remaining registers on the process stack;
     206              ;              b) Save the process SP in its TCB, OSTCBCurPtr->OSTCBStkPtr = SP;
     207              ;              c) Call OSTaskSwHook();
     208              ;              d) Get current high priority, OSPrioCur = OSPrioHighRdy;
     209              ;              e) Get current ready thread TCB, OSTCBCur = OSTCBHighRdy;
     210              ;              f) Get new process SP from TCB, SP = OSTCBHighRdy->OSTCBStkPtr;
     211              ;              g) Restore AR1H, AR0H, XAR2..XAR7, XT and RPC registers from the new process stack;
     212              ;              h) Overwrite the previously saved (at context switch out) IER register with current IER.
     213              ;              i) Perform exception return which will restore remaining context.
     214              ;
     215              ;           3) On entry into RTOSINT handler:
     216              ;              a) The following have been saved on the process stack (by processor):
     217              ;                 ST0, T, ACC, P, AR0, AR1, ST1, DP, IER, DBGSTAT (shadow) registers and the Return
     218              ;                 Address.
     219              ;              b) OSTCBCurPtr      points to the OS_TCB of the task to suspend
     220              ;                 OSTCBHighRdyPtr  points to the OS_TCB of the task to resume
     221              ;
     222              ;           4) This function MUST be placed in entry 16 (for RTOSINT) of the C28x interrupt table.
     223              ;********************************************************************************************************
     224              
     225                  .asmfunc
     226 00000044       _OS_CPU_RTOSINT_Handler:
TMS320C2000 Assembler PC v20.2.1 Mon Jan  4 16:08:36 2021

Copyright (c) 1996-2018 Texas Instruments Incorporated
C:/ti/Workspace/PLC_certificate/ImitatePLC/Software/uCOS-II/Ports/C28x/Generic/CCS/os_cpu_a.asm PAGE    6

     227                                                                              ; Save registers.
     228 00000044           OS_CTX_SAVE
1                                                                                     ; Save remaining registers.
1        00000044 0005      PUSH    AR1H:AR0H                                           ;   AR1H:AR0H
1        00000045 AABD      PUSH    XAR2                                                ;   XAR2
1        00000046 A2BD      PUSH    XAR3                                                ;   XAR3
1        00000047 A8BD      PUSH    XAR4                                                ;   XAR4
1        00000048 A0BD      PUSH    XAR5                                                ;   XAR5
1        00000049 C2BD      PUSH    XAR6                                                ;   XAR6
1        0000004a C3BD      PUSH    XAR7                                                ;   XAR7
1        0000004b ABBD      PUSH    XT                                                  ;   XT
1        0000004c 0004      PUSH    RPC                                                 ;   RPC
1                     
1                      .if .TMS320C2800_FPU32 = 1                                     ; Save FPU registers, if enabled.
1        0000004d 59AD      MOVZ    AR1   , @SP                                         ;   Can't use SP for indirect addressing.
1        0000004e E203      MOV32  *XAR1++, R0H                                         ;   R0H
         0000004f 0081 
1        00000050 E203      MOV32  *XAR1++, R1H                                         ;   R1H
         00000051 0181 
1        00000052 E203      MOV32  *XAR1++, R2H                                         ;   R2H
         00000053 0281 
1        00000054 E203      MOV32  *XAR1++, R3H                                         ;   R3H
         00000055 0381 
1        00000056 E203      MOV32  *XAR1++, R4H                                         ;   R4H
         00000057 0481 
1        00000058 E203      MOV32  *XAR1++, R5H                                         ;   R5H
         00000059 0581 
1        0000005a E203      MOV32  *XAR1++, R6H                                         ;   R6H
         0000005b 0681 
1        0000005c E203      MOV32  *XAR1++, R7H                                         ;   R7H
         0000005d 0781 
1        0000005e E200      MOV32  *XAR1++, STF                                         ;   STF
         0000005f 0081 
1        00000060 92A1      MOV     AL    , AR1                                         ;   Can't use indirect addressing with RB.
1        00000061 96AD      MOV     @SP   , AL                                          ;   Restore SP.
1        00000062 FFF0      PUSH    RB                                                  ;   RB
1                      .endif
     229                                                                              ; Save SP to current process.
     230 00000063 8D00!     MOVL    XAR0, #_OSTCBCur                                    ; Get the process's SP.
         00000064 0000 
     231 00000065 8BC0      MOVL    XAR1, *XAR0
     232 00000066 92AD      MOV     AL  , @SP
     233 00000067 96C1      MOV     *AR1,  AL
     234              
     235 00000068 761B      ASP                                                         ; Align the stack pointer.
     236                                                                              ; Call OSTaskSwHook.
     237                  ;LCR     #_OSTaskSwHook
     238 00000069 7617      NASP                                                        ; Restore alignement of the stack pointer.
     239                  
     240                                                                              ; OSPrioCur = OSPrioHighRdy
     241 0000006a 8D00!     MOVL    XAR0, #_OSPrioHighRdy
         0000006b 0000 
     242 0000006c 8D40!     MOVL    XAR1, #_OSPrioCur
         0000006d 0000 
     243 0000006e 85C0      MOV     ACC, *XAR0
TMS320C2000 Assembler PC v20.2.1 Mon Jan  4 16:08:36 2021

Copyright (c) 1996-2018 Texas Instruments Incorporated
C:/ti/Workspace/PLC_certificate/ImitatePLC/Software/uCOS-II/Ports/C28x/Generic/CCS/os_cpu_a.asm PAGE    7

     244 0000006f 96C1      MOV     *XAR1, ACC
     245                                                                              ; OSTCBCur = OSTCBHighRdy
     246 00000070 8D00!     MOVL    XAR0, #_OSTCBHighRdy
         00000071 0000 
     247 00000072 8D40!     MOVL    XAR1, #_OSTCBCur
         00000073 0000 
     248 00000074 06C0      MOVL    ACC, *XAR0
     249 00000075 1EC1      MOVL    *XAR1, ACC
     250                                                                              ; Get SP from new process.
     251 00000076 8EC1      MOVL    XAR0, *XAR1
     252 00000077 92C0      MOV     AL  , *AR0
     253 00000078 96AD      MOV     @SP , AL
     254              
     255 00000079           OS_CTX_RESTORE
1                      .if .TMS320C2800_FPU32 = 1                                     ; Restore FPU registers, if enabled.
1        00000079 FFF1      POP     RB                                                  ;   RB
1        0000007a 59AD      MOVZ    AR1, @SP                                            ;   Can't use SP for indirect addressing.
1        0000007b E280      MOV32   STF, *--XAR1                                        ;   STF
         0000007c 0089 
1        0000007d E2AF      MOV32   R7H, *--XAR1                                        ;   R7H
         0000007e 0789 
1        0000007f E2AF      MOV32   R6H, *--XAR1                                        ;   R6H
         00000080 0689 
1        00000081 E2AF      MOV32   R5H, *--XAR1                                        ;   R5H
         00000082 0589 
1        00000083 E2AF      MOV32   R4H, *--XAR1                                        ;   R4H
         00000084 0489 
1        00000085 E2AF      MOV32   R3H, *--XAR1                                        ;   R3H
         00000086 0389 
1        00000087 E2AF      MOV32   R2H, *--XAR1                                        ;   R2H
         00000088 0289 
1        00000089 E2AF      MOV32   R1H, *--XAR1                                        ;   R1H
         0000008a 0189 
1        0000008b E2AF      MOV32   R0H, *--XAR1                                        ;   R0H
         0000008c 0089 
1        0000008d 92A1      MOV     AL    , AR1                                         ;   Restore SP.
1        0000008e 96AD      MOV     @SP   , AL
1                      .endif
1                                                                                     ; Restore CPU registers part 1.
1        0000008f 0007      POP     RPC                                                 ;   RPC
1        00000090 87BE      POP     XT                                                  ;   XT
1        00000091 C5BE      POP     XAR7                                                ;   XAR7
1        00000092 C4BE      POP     XAR6                                                ;   XAR6
1        00000093 83BE      POP     XAR5                                                ;   XAR5
1        00000094 8ABE      POP     XAR4                                                ;   XAR4
1        00000095 82BE      POP     XAR3                                                ;   XAR3
1        00000096 86BE      POP     XAR2                                                ;   XAR2
1                     
1                                                                                     ; Overwrite saved IER in stack frame.
1        00000097 58AD      MOVZ    AR0 , @SP                                           ;   Get SP.
1        00000098 D886      SUBB    XAR0, #6                                            ;   Point to old IER.
1        00000099 06C0      MOVL    ACC , *XAR0                                         ;   Get old DBGSTAT:IER.
1        0000009a 5608      AND     ACC, #0xFFFF << 16
         0000009b FFFF 
1        0000009c 20A9      MOV     AL, IER                                             ;   Get current IER.
TMS320C2000 Assembler PC v20.2.1 Mon Jan  4 16:08:36 2021

Copyright (c) 1996-2018 Texas Instruments Incorporated
C:/ti/Workspace/PLC_certificate/ImitatePLC/Software/uCOS-II/Ports/C28x/Generic/CCS/os_cpu_a.asm PAGE    8

1        0000009d 1EC0      MOVL   *XAR0, ACC                                           ;   Overwrite IER.
1                     
1                                                                                     ; Restore registers part 2.
1        0000009e 0003      POP     AR1H:AR0H                                           ;   AR1H:AR0H
     256                                                                              ; Return from interrupt to restore remaining 
     257 0000009f 7602      IRET
     258                  .endasmfunc
     259              
     260              
     261              ;********************************************************************************************************
     262              ;                                     OS-II ASSEMBLY PORT FILE END
     263              ;********************************************************************************************************
     264              
     265                  .end

No Assembly Errors, No Assembly Warnings
